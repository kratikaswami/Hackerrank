/**
 * Created by kratika on 6/7/17.
 */
public class Node {
    //properties
    Node next;
    int data;

    //constructor 1.
    public Node(int newData){
        data = newData;
        next = null;
    }
    //constructor 2.
    public Node(int newData, Node newNext){
        data = newData;
        next = newNext;
    }

    //getters and setters.
    public int getData(){
        return data;
    }

    public Node getNext(){
        return next;
    }

    public void setData(int newData){
        data = newData;
    }

    public void setNext(Node newNode){
        next = newNode;
    }

}


/**
 * Created by kratika on 6/7/17.
 */
public class LinkedList {

    //properties.
    Node head;
    int count;

    //constructor.
    public  LinkedList(){

    }
    public  LinkedList(Node newHead){
        head = newHead;
        count = 1;
    }

    //methods.
    //adding a node.
    public void add(int newData){
        Node temp = new Node(newData);
        Node current = head;
        while(current.getNext() != null){
            current = current.getNext();
        }
        current.setNext(temp);
        count++;
    }
    //get a node.
    public int get(int index){
        if(index <=0){
            return -1;
        }
        Node current = head;
        for(int i = 1; i < index; i++){
            current = current.getNext();
        }
        return current.getData();
    }
    // size of the list.
    public int size(){
        return count;
    }
    // check if list is empty.
    public boolean isEmpty(){
        return  head == null;
    }
    //remove node.
    public void remove(){
        Node current = head;
        while(current.getNext().getNext() != null){
            current = current.getNext();
        }
        current.setNext(null);
        count--;
    }

    public static void main(String[] args){

        LinkedList l = new LinkedList();
        l.isEmpty();
        l.add(1);
        l.add(11);
        l.add(111);
        System.out.println(l.size());
        System.out.println(l.isEmpty());
        l.remove();
        System.out.println(l.size());


    }
}





















